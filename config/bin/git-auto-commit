#!/usr/bin/env bash
#
# git-auto-commit - Generate commit messages automatically using Claude Code
#
# Usage:
#   git-auto-commit [<notes>]
#
set -euo pipefail

usage() {
  cat << EOF
Usage: $(basename "$0") [<notes>]

Generate commit messages automatically using Claude Code.
If <notes> is provided, it will be used to help generate a better commit message.
EOF
}

if [ "$#" -gt 1 ]; then
  usage
  exit 1
fi

# Get notes from first argument
notes="${1:-}"

# Check if there are changes to commit
if [ -z "$(git status --porcelain)" ]; then
  echo "No changes to commit"
  exit 1
fi

# Spinner function
show_spinner() {
  local message="$1"
  local spinner_chars="⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"
  local i=0

  while true; do
    printf "\r🤖 %s %s" "$message" "${spinner_chars:$i:1}" >&2
    i=$(((i + 1) % ${#spinner_chars}))
    sleep 0.1
  done
}

# Start spinner
show_spinner "Generating commit message..." &
spinner_pid=$!

# Cleanup function
cleanup_spinner() {
  if [[ -n "${spinner_pid:-}" ]] && kill -0 "$spinner_pid" 2> /dev/null; then
    kill "$spinner_pid" 2> /dev/null || true
    wait "$spinner_pid" 2> /dev/null || true
  fi
  printf "\r🤖 Generating commit message... ✨ Done!    \n" >&2
}

# Ensure spinner cleanup on exit
trap cleanup_spinner EXIT

# Build prompt
prompt=$(
  cat << PROMPT
You are a git commit message generator. Output ONLY a single-line commit message.
Do not include any explanation, context, or additional text.
Do not start with "Based on..." or "Here's the commit message:".
Just output the commit message itself.

<notes>
$notes
</notes>
PROMPT
)

commit_message=$(echo "$prompt" | claude --model sonnet --print)

# Stop spinner
cleanup_spinner
trap - EXIT

# Show generated message with border
echo >&2
echo -e "─ Generated commit message ───────────────" >&2
echo -e "\033[2m$commit_message\033[0m" >&2
echo -e "──────────────────────────────────────────" >&2
echo >&2

# Commit with generated message
git commit -m "$commit_message"
