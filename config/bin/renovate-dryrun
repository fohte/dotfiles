#!/usr/bin/env bash

set -euo pipefail

usage() {
  cat << EOF
Usage: $0 [options]

Options:
  -h, --help                  Show this help message
  -c, --config <config-path>  Path to the config file (default: renovate.json5)
  -b, --branch <branch>       Branch to dry-run the Renovate (default: current branch)
  <config-path>  Path to the config file (default: renovate.json5)
EOF
  exit 1
}

while (($#)); do
  case "$1" in
    -h | --help) usage ;;
    -c | --config)
      config_file="$2"
      shift 2
      ;;
    -b | --branch)
      branch="$2"
      shift 2
      ;;
    -*)
      echo "Unknown option: $1" >&2
      usage
      ;;
    *) break ;;
  esac
done

config_file="${config_file:-renovate.json5}"
branch="${branch:-$(git rev-parse --abbrev-ref HEAD)}"

# assume the current working directory is inside the repo and follows the path pattern `**/<owner>/<repo>`
root_path="$(git root)"
repo_name="$(basename "$(dirname "$root_path")")/$(basename "$root_path")"

gh_token="$(gh-token)"

renovate_log="$(
  env LOG_LEVEL=debug \
    RENOVATE_CONFIG_FILE="$config_file" \
    RENOVATE_BASE_BRANCHES="$branch" \
    npx -y renovate \
    --token="$gh_token" \
    --schedule="" \
    --require-config=ignored \
    --dry-run=full \
    "$repo_name"
)"

branch_summary="[$(echo "$renovate_log" | sed -n '/DEBUG: Branch summary/,/DEBUG: /p' | sed -n '/"branches": /,/]/p' | sed '1d;$d')]"
branches_information="[$(echo "$renovate_log" | sed -n '/DEBUG: branches info extended/,/DEBUG: /p' | sed '1,2d;$d')"

jq -rn \
  --argjson branch_summary "$branch_summary" \
  --argjson branches_information "$branches_information" \
  "$(
    cat << 'JQ'
$branch_summary | map({ key: .branchName, value: .}) | from_entries as $summary |
$branches_information | map({ key: .branchName, value: .}) | from_entries as $info |
$summary | with_entries(.value += $info[.key]) | map(
"[\(.branchName)] \(.prTitle) (automerge: \(.automerge))\n" +
  (.upgrades | map(
    "  depName: \(.depName)\n" +
    "  version: \(.currentVersion) -> \(.newVersion)\n" +
    "  datasource: \(.datasource)\n" +
    "  packageFile: \(.packageFile)\n"
  ) | join("\n"))
) | join("\n")
JQ
  )" || {
  echo "[error] Failed to parse the Renovate log" >&2
  tmp_log="$(mktemp -t renovate-dryrun.XXXXXX.log)"
  echo "$renovate_log" > "$tmp_log"
  echo "full log: $tmp_log" >&2
  exit 1
}
