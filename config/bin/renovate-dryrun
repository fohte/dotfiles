#!/usr/bin/env bash

set -euo pipefail

# This script is a wrapper around the Renovate CLI to dry-run the Renovate on the current branch.
# The dry-run result is parsed and pretty-printed for better readability.
#
# The format of the output is:
# [<branch>] <pr-title> (automerge: <automerge>)
#   depName: <depName>
#   version: <currentVersion> -> <newVersion>
#   datasource: <datasource>
#   packageFile: <packageFile>
#
# Example:
# [renovate/aws-5.x] chore(deps): update terraform aws to v5.68.0 (automerge: true)
#   depName: aws
#   version: 5.49.0 -> 5.68.0
#   datasource: terraform-provider
#   packageFile: terraform/tfaction/main.tf
#
#   depName: aws
#   version: 5.49.0 -> 5.68.0
#   datasource: terraform-provider
#   packageFile: terraform/lambda/main.tf
#
# [renovate/tailscale-0.x] chore(deps): update terraform tailscale to v0.17.1 (automerge: true)
#   depName: tailscale
#   version: 0.13.13 -> 0.17.1
#   datasource: terraform-provider
#   packageFile: terraform/tailscale/main.tf

usage() {
  cat << EOF
Usage: $0 [options]

Options:
  -h, --help                  Show this help message
  -c, --config <config-path>  Path to the config file (default: renovate.json5)
  -b, --branch <branch>       Branch to dry-run the Renovate (default: current branch)
  --raw                       Show the raw Renovate log
EOF
  exit 1
}

while (($#)); do
  case "$1" in
    -h | --help) usage ;;
    -c | --config)
      config_file="$2"
      shift 2
      ;;
    -b | --branch)
      branch="$2"
      shift 2
      ;;
    --raw)
      raw=true
      shift
      ;;
    -*)
      echo "Unknown option: $1" >&2
      usage
      ;;
    *) break ;;
  esac
done

raw="${raw:-false}"
config_file="${config_file:-renovate.json5}"
branch="${branch:-$(git rev-parse --abbrev-ref HEAD)}"

# assume the current working directory is inside the repo and follows the path pattern `**/<owner>/<repo>`
root_path="$(git root)"
repo_name="$(basename "$(dirname "$root_path")")/$(basename "$root_path")"

gh_token="$(gh-token)"

dryrun() {
  env LOG_LEVEL=debug \
    RENOVATE_CONFIG_FILE="$config_file" \
    RENOVATE_BASE_BRANCHES="$branch" \
    npx -y renovate \
    --token="$gh_token" \
    --schedule="" \
    --require-config=ignored \
    --dry-run=full \
    "$repo_name"
}

if [[ "$raw" == "true" ]]; then
  dryrun
  exit
fi

renovate_log="$(dryrun)"

find_json() {
  target_log="$1"

  printf '{'
  echo "$renovate_log" | perl -ne 'BEGIN { $target_log = shift } print if /$target_log/ .. !/$target_log/ && /^\s*[A-Z]+:/' "$target_log" | sed '1d;$d' | sed -e 's/: undefined/: null/'
  printf '}\n'
}

parse_log() {
  branch_summary="$(find_json 'DEBUG: Branch summary' | jq -r '.branches | map({ key: .branchName, value: .}) | from_entries')"
  branches_information="$(find_json 'DEBUG: branches info extended' | jq -r '.branchesInformation | map({ key: .branchName, value: .}) | from_entries')"

  jq -rn \
    --argjson branch_summary "$branch_summary" \
    --argjson branches_information "$branches_information" \
    "$(
      cat << 'JQ'
$branch_summary | map({ key: .branchName, value: .}) | from_entries as $summary |
$branches_information | map({ key: .branchName, value: .}) | from_entries as $info |
$summary | with_entries(.value += $info[.key]) | map(
"[\(.branchName)] \(.prTitle) (automerge: \(.automerge))\n" +
  (.upgrades | map(
    "  depName: \(.depName)\n" +
    "  version: \(.currentVersion) -> \(.newVersion)\n" +
    "  datasource: \(.datasource)\n" +
    "  packageFile: \(.packageFile)\n"
  ) | join("\n"))
) | join("\n")
JQ
    )"

  echo "## Detected dependencies (no upgrades)"
  echo

  jq -rn \
    --argjson package_files "$(find_json 'DEBUG: Checking packageFiles for deprecated packages')" \
    "$(
      cat << 'JQ'
$package_files | .packageFiles | to_entries | map(
  "\(.key)\n" + (.value | map(
    "  \(.packageFile)\n" +
    (.deps | map(
      select((.updates | length == 0) and (has("skipReason") | not)) |
      "    \(.depName) \(if .currentVersien != null then .currentVersion else .currentValue end)"
    ) | join("\n"))
  ) | join("\n\n"))
) | join("\n\n")
JQ
    )"
}

parse_log || {
  echo "[error] Failed to parse the Renovate log" >&2
  tmp_log="$(mktemp -t renovate-dryrun.XXXXXX.log)"
  echo "$renovate_log" > "$tmp_log"
  echo "full log: $tmp_log" >&2
  exit 1
}
