#!/usr/bin/env bash
#
# vibe - Claude Code wrapper with tmux session and git worktree management
#
# Requirements:
#   - tmux
#   - git
#   - claude (Claude Code CLI)
#
# Usage:
#   vibe start <name>
#   vibe done <name> [--force]
#
set -euo pipefail

usage() {
  cat << EOF
Usage: $(basename "$0") <command> [<args>]

Commands:
  start <name>
    Start a new Claude Code session with worktree

  done <name> [--force]
    Remove branch and worktree (only if merged)
    Use --force to skip merge check

vibe is a wrapper for Claude Code that:
  - Creates/enters a tmux session 'vibe'
  - Creates a git branch 'claude/<name>' from origin/master
  - Creates a worktree at '.worktrees/<name>'
  - Starts Claude Code in a new tmux window
EOF
}

if [ "$#" -lt 1 ]; then
  usage
  exit 1
fi

command="$1"
shift

case "$command" in
  start)
    if [ "$#" -ne 1 ]; then
      echo "error: 'start' requires exactly one argument" >&2
      usage
      exit 1
    fi
    name="$1"
    ;;
  done)
    force=false
    # Parse options
    while [ "$#" -gt 0 ]; do
      case "$1" in
        --force)
          force=true
          shift
          ;;
        -*)
          echo "error: unknown option '$1'" >&2
          usage
          exit 1
          ;;
        *)
          if [ -n "${name:-}" ]; then
            echo "error: 'done' requires exactly one name argument" >&2
            usage
            exit 1
          fi
          name="$1"
          shift
          ;;
      esac
    done

    if [ -z "${name:-}" ]; then
      echo "error: 'done' requires a name argument" >&2
      usage
      exit 1
    fi
    ;;
  *)
    echo "error: unknown command '$command'" >&2
    usage
    exit 1
    ;;
esac

SESSION_NAME="vibe"
branch="claude/${name}"
worktree_dir=".worktrees/${name}"

# Check if git repo
if ! git rev-parse --git-dir > /dev/null 2>&1; then
  echo "error: not in a git repository" >&2
  exit 1
fi

# Get the git root directory
git_root="$(git rev-parse --show-toplevel)"
worktree_path="${git_root}/${worktree_dir}"

if [ "$command" = "start" ]; then
  # Check if we need to create a new session
  create_new_session=false
  if ! tmux has-session -t "$SESSION_NAME" 2> /dev/null; then
    create_new_session=true
  fi

  # Check if branch already exists
  if git show-ref --verify --quiet "refs/heads/${branch}"; then
    echo "Branch '${branch}' already exists" >&2
    exit 1
  else
    # Create new branch from origin/master
    echo "Creating branch '${branch}' from origin/master..."
    git fetch origin master
    git branch "${branch}" origin/master
  fi

  # Check if worktree already exists
  if [ -d "${worktree_path}" ]; then
    echo "Worktree '${worktree_dir}' already exists" >&2
    exit 1
  else
    # Create worktree
    echo "Creating worktree at '${worktree_dir}'..."
    git worktree add "${worktree_path}" "${branch}"
  fi

  # Create new window and start claude code in the worktree
  window_name="$(basename "${git_root}")-${name}"

  if [ "$create_new_session" = true ]; then
    # Create session with the first window
    tmux new-session -ds "$SESSION_NAME" -n "$window_name" -c "${worktree_path}"
    tmux send-keys -t "$SESSION_NAME:$window_name" "claude" C-m
  else
    # Create new window in existing session
    tmux new-window -t "$SESSION_NAME" -n "$window_name" -c "${worktree_path}"
    tmux send-keys -t "$SESSION_NAME:$window_name" "claude" C-m
  fi

  # Switch to the session
  tmux switch-client -t "$SESSION_NAME" 2> /dev/null || true

elif [ "$command" = "done" ]; then
  # Check if branch exists
  if ! git show-ref --verify --quiet "refs/heads/${branch}"; then
    echo "Branch '${branch}' does not exist" >&2
    exit 1
  fi

  # Check if branch has been merged (unless --force is used)
  if [ "$force" = false ]; then
    # First, try to check via GitHub PR (handles squash merge case)
    pr_merged=false
    if command -v gh &> /dev/null; then
      # Get PR info for the specific branch
      pr_info=$(gh pr list --state all --head "${branch}" --json number,merged,state --limit 1 2>/dev/null)
      if [ -n "$pr_info" ] && [ "$pr_info" != "[]" ]; then
        # Check if PR exists and is merged
        if echo "$pr_info" | jq -e '.[0].merged == true' > /dev/null 2>&1; then
          pr_merged=true
        fi
      fi
    fi

    # If no merged PR found, check with git branch --merged
    if [ "$pr_merged" = false ]; then
      if ! git branch --merged | grep -q "^[[:space:]]*${branch}$"; then
        echo "error: branch '${branch}' has not been merged yet" >&2
        echo "Please merge the branch first or use 'vibe done ${name} --force' to force delete" >&2
        exit 1
      fi
    fi
  else
    echo "Force deletion requested, skipping merge check..."
  fi

  # Remove worktree if it exists
  if [ -d "${worktree_path}" ]; then
    echo "Removing worktree at '${worktree_dir}'..."
    git worktree remove "${worktree_path}"
  fi

  # Delete the branch
  echo "Deleting branch '${branch}'..."
  if [ "$force" = true ]; then
    git branch -D "${branch}"
  else
    git branch -d "${branch}"
  fi

  # Close tmux window if it exists
  window_name="$(basename "${git_root}")-${name}"
  if tmux list-windows -t "$SESSION_NAME" -F "#{window_name}" 2> /dev/null | grep -q "^${window_name}$"; then
    echo "Closing tmux window '${window_name}'..."
    tmux kill-window -t "$SESSION_NAME:${window_name}"
  fi

  echo "Done! Branch '${branch}' and worktree '${worktree_dir}' have been removed."
fi
