snippet def
def ${1:method_name}(${2})
	${0:# TODO}
end
endsnippet

snippet doc "yard docs"
# ${1:method_description}
# @param ${2:param_name} [${3:type}] ${4:param_description}
# @return [${5:type}] ${6:return_value_description}
endsnippet

snippet frozen
# frozen_string_literal: true

endsnippet

snippet defnode
def_node_matcher :${1:name}, <<-PATTERN
	(${2})
PATTERN
endsnippet

snippet itis "it { is_expected.to ... }"
it { is_expected.to ${0} }
endsnippet

snippet itisnt "it { is_expected.not_to ... }"
it { is_expected.not_to ${0} }
endsnippet

snippet it "it ..."
it '${1}' do
	${0}
end
endsnippet

snippet context "context ..."
context '${1}' do
	${0}
end
endsnippet

snippet describe "describe ..."
describe '${1}' do
	${0}
end
endsnippet

snippet let "let { ... }"
let(:${1}) { ${0} }
endsnippet

snippet letdo "let do ..."
let(:${1}) do
	${0}
end
endsnippet

snippet subject "subject { ... }"
subject${1:(:${2})} { ${0} }
endsnippet

snippet subjectdo "subject do ..."
subject${1:(:${2})} do
	${0}
end
endsnippet

snippet before "before do ..."
before do
	${0}
end
endsnippet
