snippet def
def ${1:method_name}(${2})
	${0:raise NotImplementedError}
end
endsnippet

snippet @p
@param ${1:param_name} [${2:type}] ${0:param_description}
endsnippet

snippet @r
@return [${1:type}] ${0:param_description}
endsnippet

snippet itis "it { is_expected.to ... }"
it { is_expected.to ${0} }
endsnippet

snippet itisnt "it { is_expected.not_to ... }"
it { is_expected.not_to ${0} }
endsnippet

snippet it "it ..."
it '${1}' do
	${0}
end
endsnippet

snippet cont "context ..."
context '${1}' do
	${0}
end
endsnippet

snippet desc "describe ..."
describe '${1}' do
	${0}
end
endsnippet

snippet let "let { ... }"
let(:${1}) { ${0} }
endsnippet

snippet sbj "subject { ... }"
subject(${1}) { ${0} }
endsnippet

snippet bef "before do ..."
before do
	${0}
end
endsnippet
